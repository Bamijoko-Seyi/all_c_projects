int row_number_finder(FILE *puzzle_file);//finds the number of rows in each file 
void word_list_initializer(FILE *word_list, int word_length,char  word_list_array[][word_length + 1]);//initializes the word list needed for the program 
void grid_initializer(FILE *puzzle_file, int row,char character_grid[][row]);//initializes the word gird to be searched 
void horizontally(int D, int P, int h,int row,int word_length,int word_line_count,int result_storer[][4], char character_grid[][row],int word_hash_list[word_line_count],char word_list_array[][word_length + 1]);//searches for the word horizontally(horizontal right and horizontal left)
void vertically(int D, int P, int h,int row,int word_length,int word_line_count,int result_storer[][4], char character_grid[][row],int word_hash_list[word_line_count],char word_list_array[][word_length + 1]);//searches for the word vetically(vertical up and vartical down)
void bottom_left_to_top_right(int D, int P, int h,int row,int word_length,int word_line_count,int result_storer[][4], char character_grid[][row],int word_hash_list[word_line_count],char word_list_array[][word_length + 1]);//searches for the word bottom_left_to_top_right
void top_right_backwards_to_bottom_left(int D, int P, int h,int row,int word_length,int word_line_count,int result_storer[][4], char character_grid[][row],int word_hash_list[word_line_count],char word_list_array[][word_length + 1]);//searches for the word top_right_backwards_to_bottom_left
void bottom_right_backwards_to_top_left_diagonal(int D, int P, int h,int row,int word_length,int word_line_count,int result_storer[][4], char character_grid[][row],int word_hash_list[word_line_count],char word_list_array[][word_length + 1]);//searches for the word bottom_right_backwards_to_top_left_diagonal
void top_left_to_bottom_right_diagonal(int D, int P, int h,int row,int word_length,int word_line_count,int result_storer[][4], char character_grid[][row],int word_hash_list[word_line_count],char word_list_array[][word_length + 1]);//searches for the word top_left_to_bottom_right_diagonal